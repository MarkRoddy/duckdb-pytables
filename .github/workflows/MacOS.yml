name: MacOS
on: [push]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true
defaults:
  run:
    shell: bash

jobs:
  macos:
    name: MacOS Release (Universal)
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: [ '<submodule_version>' ]
        # python_version: ['3.8', '3.9', '3.10', '3.11']
        # todo: only reducing matrix for debugging
        python_version: ['3.8']
        # DEBUG DEBUG DEBUG
        arch: ['amd64', 'arm64']

    env:
      OSX_BUILD_UNIVERSAL: 0
      OSX_TARGET_ARCH: ${{ matrix.arch }}
      GEN: ninja
      PYTHON_VERSION: ${{ matrix.python_version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Install Ninja
        run: brew install ninja

      - name: Install OpenSSL
        run: |
          brew install openssl@3.0
          
      #     brew install openssl
      #     arch -arm64 brew install openssl@1.1
        
      - uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python_version }}'

      # - name: Install OpenSSL
      #   shell: bash
      #   run: |
      #     mkdir -p build/openssl
      #     cd build/openssl
      #     mkdir sources build
      #     curl https://www.openssl.org/source/openssl-3.0.5.tar.gz | tar xv -C sources --strip-components 1
      #     export OPENSSL_ROOT_DIR=`pwd`/build
      #     cd sources
      #     export CC="clang -arch x86_64 -arch arm64"
      #     perl ./Configure --prefix=$OPENSSL_ROOT_DIR darwin64-x86_64-cc no-asm
      #     make -j
      #     make install_sw

      # - name: Get OpenSSL path
      #   shell: bash
      #   run: |
      #     export OPENSSL_ROOT_DIR=`pwd`/build/openssl/build
      #     echo "OPENSSL_ROOT_DIR=$OPENSSL_ROOT_DIR" >> $GITHUB_ENV

      - name: Checkout DuckDB to version
        if: ${{ matrix.duckdb_version != '<submodule_version>'}}
        run: |
          cd duckdb
          git checkout ${{ matrix.duckdb_version }}

         # Build extension
      - name: Build extension
        shell: bash
        run: |
          make release
          make test

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_DEPLOY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_DEPLOY_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.S3_REGION }}
          BUCKET_NAME: ${{ secrets.S3_BUCKET }}
        run: |
          cd duckdb
          git fetch --tags
          export DUCKDB_VERSION=`git tag --points-at HEAD`
          echo $DUCKDB_VERSION
          export DUCKDB_VERSION=${DUCKDB_VERSION:=`git log -1 --format=%h`}
          echo $DUCKDB_VERSION
          cd ..
          if [[ "$AWS_ACCESS_KEY_ID" == "" ]] ; then
            echo 'No key set, skipping'
          elif [[ "$GITHUB_REF" =~ ^(refs/tags/v.+)$ ]] ; then
            python -m pip install awscli
            ./scripts/extension-upload.sh quack ${{ github.ref_name }} $DUCKDB_VERSION osx_amd64 $BUCKET_NAME true
            ./scripts/extension-upload.sh quack ${{ github.ref_name }} $DUCKDB_VERSION osx_arm64 $BUCKET_NAME true
          elif [[ "$GITHUB_REF" =~ ^(refs/heads/main)$ ]] ; then
            python -m pip install awscli
            ./scripts/extension-upload.sh quack `git log -1 --format=%h` $DUCKDB_VERSION osx_amd64 $BUCKET_NAME false
            ./scripts/extension-upload.sh quack `git log -1 --format=%h` $DUCKDB_VERSION osx_arm64 $BUCKET_NAME false
          fi
